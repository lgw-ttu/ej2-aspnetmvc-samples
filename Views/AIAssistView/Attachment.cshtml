@using Syncfusion.EJ2.InteractiveChat
@using Syncfusion.EJ2
@using Newtonsoft.Json

@section ControlsSection{
    <div class="control-section">
        <div class="attachment-aiassistview">
            @Html.EJS().AIAssistView("aiAssistView").ToolbarSettings(new AIAssistViewToolbarSettings() { Items = ViewData["ToolbarItems"], ItemClicked = "toolbarItemClicked" }).PromptSuggestions((string[])ViewData["PromptSuggestionData"]).BannerTemplate("#bannerContent").PromptRequest("onPromptRequest").EnableAttachments(true).AttachmentSettings(new AIAssistViewAttachmentSettings() { SaveUrl = @Url.Content("https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Save"), RemoveUrl = @Url.Content("https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Remove") }).Render()
        </div>
    </div>
    @*custom code start*@
    <style>
        .attachment-aiassistview {
            height: 600px;
            width: 60vw;
            margin: 0 auto;
        }

        .attachment-aiassistview .banner-content .e-assistview-icon:before {
            font-size: 35px;
        }

        .attachment-aiassistview .banner-content {
            display: flex;
            flex-direction: column;
            justify-content: center;
            height: 330px;
            text-align: center;
        }

        @@media only screen and (max-width: 750px) {
            .attachment-aiassistview {
                width: 100%;
            }
        }
    </style>
    @*custom code end*@
}

@section PreScripts {
    <script>
        var prompts = @Html.Raw(Json.Encode(ViewData["PromptResponseData"]));
        var suggestions = @Html.Raw(Json.Encode(ViewData["PromptSuggestionData"]));
        function onPromptRequest(args) {
            setTimeout(() => {
                var foundPrompt = prompts.find(prompt => prompt.Prompt == args.prompt);
                var defaultResponse = 'For real-time prompt processing, connect the AI AssistView control to your preferred AI service, such as OpenAI or Azure Cognitive Services. Ensure you obtain the necessary API credentials to authenticate and enable seamless integration.';
                this.addPromptResponse(foundPrompt ? foundPrompt.Response : defaultResponse);
                this.promptSuggestions = (foundPrompt?.SuggestionData && foundPrompt.SuggestionData.length > 0) ? foundPrompt.SuggestionData : suggestions;
            }, 2000);
        }

        function toolbarItemClicked(args) {
            if (args.item.iconCss === 'e-icons e-refresh') {
                this.prompts = [];
                this.promptSuggestions = suggestions;
            }
        }
    </script>
    <script id="bannerContent" type="text/x-jsrender">
        <div class="banner-content">
            <div class="e-icons e-assistview-icon"></div>
            <h3>AI Assistance</h3>
            <i>Type your message or attach files to get started.</i>
        </div>
    </script>
}

@section Meta{
    <meta name="description" content="This example demonstrates the attachment support in ASP.NET MVC AIAssistView control. Explore here for more details." />
}
@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates how users can attach files while interacting with the AI AssistView. The component enables file uploads to enhance the context of conversations and responses.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, the <code>EnableAttachments</code> property is set to <code>true</code> to enable file attachments.
            By, using the <code>AttachmentSettings</code> configure the <code>saveUrl</code> and <code>removeUrl</code> to allow file uploads for the attached files.
            Additionally, the <code>BannerTemplate</code> customizes the banner message, and <code>AssistViewToolbar</code> adds custom toolbar items like a right-aligned <code>Refresh</code> button.
            The <code>PromptSuggestions</code> provides AI prompt suggestions, and <code>PromptRequested</code> handles prompt requests when triggered.
        </p>
    </div>
}
@section Title{
    <title>ASP.NET MVC AIAssistView Attachment Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Attachment in ASP.NET MVC AIAssistView Control</h1>
}