@using Syncfusion.EJ2.InteractiveChat
@using Syncfusion.EJ2.Navigations
@using Syncfusion.EJ2.SplitButtons
@using Syncfusion.EJ2
@using Newtonsoft.Json

@section ControlsSection{
<div class="control-section">
    <div>
        <div class="ai-assistant">
            @Html.EJS().AIAssistView("aiAssistView").PromptSuggestions((string[])ViewData["PromptSuggestionData"]).ToolbarSettings(new AIAssistViewToolbarSettings() { Items = ViewData["AssistantTemplateItems"] }).EnableAttachments(true).AttachmentSettings(new AIAssistViewAttachmentSettings() { SaveUrl = @Url.Content("https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Save"), RemoveUrl = @Url.Content("https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Remove") }).BannerTemplate("#bannerContent").PromptRequest("onPromptRequest").Created("onCreated").Render()
        </div>
    </div>
    @{Html.EJS().Sidebar("assistantSidebar").Width("260px").Target(".ai-assistant").Position(Syncfusion.EJ2.Navigations.SidebarPosition.Left).EnableDock(true).DockSize("75px").EnableGestures(false).ContentTemplate(@<div>
    <div class="assistant-sidebar-header">
        @Html.EJS().Toolbar("assistantToolbar").Created("toolbarCreated").Render()
    </div>
    <div class="assistant-sidebar-content">
        <div class="assistant-listview-option" tabindex="1">
            <div class="e-icons e-multiple-comment"></div>
            <div class="header-conversation">Chat Conversations</div>
            <span class="e-icons e-refresh" title="Reset" id="resetButton"></span>
        </div>
        @Html.EJS().ListView("assistant-listview-grp").Select("onListViewSelect").Fields(new Syncfusion.EJ2.Lists.ListViewFieldSettings() { GroupBy = "category", Id = "id", Text = "text" }).Template((string)ViewData["ListTemplate"]).Render()
    </div>
</div>).Render();}
</div>
@*custom code start*@
<style>
    .ai-assistant {
        height: 500px;
        width: auto;
        margin: 0 auto;
    }

        .ai-assistant #aiAssistView {
            width: auto !important;
        }

    #assistant-splitter .canvas-response {
        padding: 16px;
        overflow-y: auto;
        height: 100%;
        font-family: inherit;
    }

    .ai-assistant .banner-content .e-assistview-icon:before {
        font-size: 35px;
    }

    .ai-assistant .banner-content {
        display: flex;
        flex-direction: column;
        justify-content: center;
        height: 330px;
        text-align: center;
    }

        .ai-assistant .banner-content.e-no-content {
            height: 25vh;
        }

        .ai-assistant .banner-content h3 {
            margin: 0;
        }

        .ai-assistant .banner-content .e-assistview-icon:before {
            font-size: 40px;
        }

    #assistantSidebar {
        border: 1px solid var(--color-sf-border);
        border-right: unset;
    }

        #assistantSidebar .e-listview .e-aiassist-chat::before {
            font-size: 18px;
        }

        #assistantSidebar .e-listview .e-aiassist-chat {
            margin: 0 8px;
        }

        /* Chat item styles */
        #assistantSidebar #assistant-listview-grp .chat-item {
            padding-left: 6px;
            cursor: pointer;
        }

        #assistantSidebar #assistant-listview-grp .chat-title {
            font-size: 14px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            margin-bottom: 5px;
        }

        #assistantSidebar #assistant-listview-grp .chat-time {
            font-size: 12px;
            color: #757575;
        }

        #assistantSidebar #assistant-listview-grp {
            height: calc(100% - 50px);
            overflow-y: auto;
            border: none;
        }

        #assistantSidebar .assistant-listview-option {
            display: flex;
            padding: 10px 10px 10px 8px;
            align-items: center;
        }

            #assistantSidebar .assistant-listview-option div {
                font-size: 16px;
                font-weight: 500;
                margin-left: 10px;
            }

            #assistantSidebar .assistant-listview-option span {
                margin-left: auto;
                margin-top: 5px;
            }

        #assistantSidebar .e-toolbar-left .e-toolbar-item .e-tbar-btn {
            pointer-events: none;
        }

        #assistantSidebar .assistant-sidebar-header .e-toolbar,
        #assistantSidebar .assistant-sidebar-header .e-toolbar .e-tbar-btn {
            background: inherit;
        }

        #assistantSidebar.e-close .assistant-sidebar-content .assistant-listview-option .header-conversation,
        #assistantSidebar.e-close .assistant-sidebar-content .assistant-listview-option .e-refresh,
        #assistantSidebar.e-close .assistant-sidebar-content #assistant-listview-grp,
        #assistantSidebar.e-close .new-chat-button,
        #assistantSidebar.e-close .e-toolbar-left .e-toolbar-item {
            display: none;
        }

        #assistantSidebar.e-close .assistant-sidebar-content .assistant-listview-option .e-multiple-comment {
            font-size: 24px;
            padding-left: 5px;
        }

        #assistantSidebar.e-close .e-toolbar-items .e-toolbar-right {
            left: 14px;
        }

        #assistantSidebar .e-toolbar-item .e-tbar-btn:hover .e-icons {
            color: #6c757d;
        }

        #assistantSidebar .assistant-listview-option #resetButton {
            cursor: pointer;
            font-size: 15px;
        }

    @@media screen and (max-width: 480px) {
        #assistantSidebar .e-toolbar-items .e-toolbar-right {
            margin-left: 100px;
        }

        .ai-assistant {
            width: 100%;
        }
    }
</style>
@*custom code end*@
}

@section PreScripts {
    <script>
        var prompts = @Html.Raw(Json.Encode(ViewData["PromptResponseData"]));
        var suggestions = @Html.Raw(Json.Encode(ViewData["PromptSuggestionData"]));
        var selectedConvId = "";
        var isFirstPrompt = false;
        var aiAssistViewInst;
        var grpListObj;
        var sideObj;
        var toolbarObj;
        var listData = [];

        document.addEventListener('DOMContentLoaded', function () {
            InitializingApp();
            listData = getLeftPaneData();
            var sidebarElement = document.getElementById('assistantSidebar');
            sideObj = ej.base.getInstance(sidebarElement, ejs.navigations.Sidebar);
            // Initialize ListView with data after it's been created
            grpListObj = getListViewInstance();
            if (grpListObj) {
                grpListObj.dataSource = listData;
                grpListObj.dataBind();
            } 
        });

        function toolbarCreated() {
            var toolbarEle = document.getElementById('assistantToolbar');
            toolbarObj = ej.base.getInstance(toolbarEle, ejs.navigations.Toolbar);

            toolbarObj = new ej.navigations.Toolbar({
                overflowMode: 'Popup',
                items: [
                    {
                        prefixIcon: 'e-icons e-assistview-icon', tooltipText: 'Ai-Assistant',
                    },
                    {
                        prefixIcon: 'e-icons e-menu', tooltipText: 'Toggle sidebar', align: 'Right',
                        click: function () {
                            sideObj.toggle();
                        }
                    },
                    {
                        prefixIcon: 'e-icons e-rename', tooltipText: 'Start new chat', align: 'Right',
                        click: function () {
                            loadNewAIAssist();
                        },
                        cssClass: 'new-chat-button'
                    },
                ],
            });
            toolbarObj.appendTo(toolbarEle);
        }

        function toggle() {
            sideObj.toggle();
        }

        function onToolbarClick(args) {
            if (args.item && args.item.id === "toggleSidebarBtn") {
                toggle();
            }
            if (args.item && args.item.id === "newChatBtn") {
                loadNewAIAssist();
            }
        }

        // Fetch your API_KEY
        const API_KEY = "Your API key";
        // Updat your AI model
        const model = "Your AI model";

        async function GetResult(prompt) {
            // Find the matching response object in assistantResponses array
            let responseObj = prompts.find(resp => resp.Prompt === prompt);
            const result = responseObj ? responseObj.Response : "I apologize, but I'm experiencing some difficulty processing your request at this moment, which might be due to the complexity of your query or a technical limitation on my end, so I would greatly appreciate it if you could rephrase your question or provide additional context that might help me better understand what you're looking for.";
            return result;
        }

        function onPromptRequest(args) {
            //OLD CODE
            //execute(args.prompt);

            //NEW CODE


            fetch('/?handler=GetAIResponse', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ prompt: args.prompt })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(responseText => {
                    const text = responseText.trim() || 'No response received.';
                    stopStreaming = false;
                    streamResponse(text);
                })
                .catch(error => {
                    assistObj.addPromptResponse('⚠️ Something went wrong while connecting to the AI service. Please try again later.');
                    stopStreaming = true;
                });
        }

        function onListViewSelect(args) {
            if (args.event) {
                selectedConvId = args.data.id;
                updateAIAssistViewData(args.data.id);
                updateBannerStyle();
            }
        }

        function onCreated() {
            var assistEle = document.getElementById('aiAssistView');
            aiAssistViewInst = ej.base.getInstance(assistEle, ejs.interactivechat.AIAssistView);
            var splitBtnObj = new ej.splitbuttons.DropDownButton({
                content: 'Profile',
                items: [
                    { text: 'Settings', iconCss: 'e-icons e-settings' },
                    { separator: true },
                    { text: 'Log out', iconCss: 'e-icons e-export' }
                ],
                iconCss: 'e-icons e-user',
                cssClass: 'sign-in-button',
            });
            splitBtnObj.appendTo('#ddMenu');
        }

        function getDate() {
            return Date.now();
        }

        function getDateFormat(date) {
            const today = new Date(date);
            const yyyy = today.getFullYear();
            let mm = today.getMonth() + 1;
            let dd = today.getDate();
            if (dd < 10) dd = '0' + dd;
            if (mm < 10) mm = '0' + mm;
            return dd + '/' + mm + '/' + yyyy;
        }

        function getCategory(today, key) {
            var date = getDateFormat(key);
            if (date == today) {
                return "Today";
            } else {
                return "Previous days";
            }
        }

        function checkInitialLocalStorage(isClear) {
            var aiAssistView = localStorage.getItem('aiassist-view');
            if (!aiAssistView | isClear) {
                var data = {};
                localStorage.setItem('aiassist-view', JSON.stringify(data));
            }
        }

        function checkAndUpdateLocalStorage(prompt) {
            grpListObj = getListViewInstance();
            var aiAssistView = localStorage.getItem('aiassist-view');
            var appData = JSON.parse(aiAssistView);
            var curConvDate = getDate();
            var prompts = [];
            var orgPrompts = aiAssistViewInst.prompts;
            for (var i = 0; i < orgPrompts.length; i++) {
                var tPrompt = { prompt: orgPrompts[i].prompt, response: orgPrompts[i].response };
                prompts.push(tPrompt);
            }
            var pSuggestions = [];
            var orgPSuggestions = aiAssistViewInst.promptSuggestions;
            for (var j = 0; j < orgPSuggestions.length; j++) {
                pSuggestions.push(orgPSuggestions[j]);
            }
            if (selectedConvId) {
                var convData = appData[selectedConvId];
                if (convData?.name === convData?.name) {
                    var listItems = grpListObj.dataSource;
                    for (var k = 0; k < listItems.length; k++) {
                        if (listItems[k].id === selectedConvId) {
                            listItems[k].text = convData?.name;
                            break;
                        }
                    }
                    grpListObj.dataBind();
                }
                convData.prompts = prompts;
                convData.promptSuggestions = pSuggestions;
                localStorage.setItem('aiassist-view', JSON.stringify(appData));
            } else {
                selectedConvId = curConvDate;
                var convData = {
                    name: prompt,
                    prompts: prompts,
                    promptSuggestions: pSuggestions
                };
                appData[curConvDate] = convData;
                localStorage.setItem('aiassist-view', JSON.stringify(appData));
                refreshConversationList();
                grpListObj.selectItem(0);
            }
        }

        function getListViewInstance() {
            var listEle = document.getElementById('assistant-listview-grp');
            var instance = ej.base.getInstance(listEle, ejs.lists.ListView);

            // If instance doesn't exist yet, initialize it
            if (!instance) {
                instance = new ejs.lists.ListView({
                    dataSource: listData,
                });
                instance.appendTo(listEle);
            }
            return instance;
        }

        function getLeftPaneData() {
            var today = getDateFormat(Date.now());
            var aiAssistView = localStorage.getItem('aiassist-view');
            var appData = JSON.parse(aiAssistView) || {};
            var keys = Object.keys(appData || {});
            var items = [];
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var numericKey = parseInt(key);
                var convData = appData[key];
                var name = convData.name.split('\n')[0];

                items.push({
                    text: name,
                    id: numericKey,
                    numericId: numericKey,
                    category: getCategory(today, numericKey),
                    time: getDateFormat(numericKey)
                });
            }
            items.sort(function (a, b) {
                return b.numericId - a.numericId;
            });

            return items;
        }

        function updateBannerStyle() {
            var bannerElem = document.querySelector('.banner-content');
            if (aiAssistViewInst.prompts.length) {
                bannerElem.classList.remove('e-no-content');
            } else {
                bannerElem.classList.add('e-no-content');
            }
        }

        function updateConversationName(prompt) {
            if (isFirstPrompt && selectedConvId) {
                grpListObj = getListViewInstance();
                const aiAssistView = JSON.parse(localStorage.getItem('aiassist-view'));
                const convData = aiAssistView[selectedConvId];
                if (convData?.name === "New Conversation") {
                    convData.name = prompt.slice(0, 40).trim();
                    localStorage.setItem('aiassist-view', JSON.stringify(aiAssistView));
                    const listItem = grpListObj.dataSource.find(item => item.id === selectedConvId);
                    if (listItem) {
                        listItem.text = convData.name;
                        grpListObj.dataBind();
                    }
                    refreshConversationList();
                }
                isFirstPrompt = false;
            }
        }

        function refreshConversationList() {
            grpListObj = getListViewInstance();
            var listData = getLeftPaneData();
            grpListObj.dataSource = listData;
            grpListObj.dataBind();
        }

        function updateAIAssistViewData(id) {
            if (id) {
                var aiAssistView = localStorage.getItem('aiassist-view');
                var appData = JSON.parse(aiAssistView);
                var convData = appData[id];

                aiAssistViewInst.prompts = convData.prompts;
                aiAssistViewInst.promptSuggestions = convData.promptSuggestions;
            } else {
                aiAssistViewInst.prompts = [];
                aiAssistViewInst.promptSuggestions = suggestions;
            }
        }

        function loadNewAIAssist() {
            grpListObj = getListViewInstance()
            selectedConvId = "";
            isFirstPrompt = true;
            if (grpListObj.dataSource.length != 0) {
                aiAssistViewInst.prompts = [];
                aiAssistViewInst.promptSuggestions = suggestions;
            }
            var curConvDate = getDate();
            var aiAssistView = localStorage.getItem('aiassist-view');
            var appData = JSON.parse(aiAssistView);

            var convData = {
                name: "New Conversation",
                prompts: [],
                promptSuggestions: suggestions
            };
            appData[curConvDate] = convData;
            localStorage.setItem('aiassist-view', JSON.stringify(appData));
            refreshConversationList();
            selectedConvId = curConvDate;
            grpListObj.selectItem({ id: curConvDate });
            updateBannerStyle();
        }

        function InitializingApp() {
            checkInitialLocalStorage();
            document.getElementById('resetButton').addEventListener('click', function () {
                grpListObj = getListViewInstance();
                grpListObj.dataSource = [];
                grpListObj.dataBind();
                localStorage.setItem('aiassist-view', JSON.stringify({}));
                selectedConvId = "";
                aiAssistViewInst.prompts = [];
                aiAssistViewInst.promptSuggestions = suggestions;
                updateBannerStyle();
            });
        }

        async function execute(prompt) {
            try {
                aiAssistViewInst.promptSuggestions = [];
                var finalResult = [];
                var result = "";

                setTimeout(async () => {
                    let suggestionsObj = prompts.find((resp) => resp.prompt === prompt);
                    let suggestionResult = suggestionsObj ? suggestionsObj.suggestions : suggestions;

                    for (var i = 0; i < suggestionResult.length; i++) {
                        if (suggestionResult[i]) {
                            finalResult.push(suggestionResult[i].replace("- ", "").replace("* ", "").trim());
                        }
                    }
                }, 1000);
                setTimeout(async () => {
                    result = await GetResult(prompt);
                    aiAssistViewInst.addPromptResponse(result);
                    aiAssistViewInst.promptSuggestions = finalResult;
                    updateBannerStyle();
                    checkAndUpdateLocalStorage(prompt);
                    updateConversationName(prompt);
                }, 1000);
            } catch (error) {
                result = error;
                aiAssistViewInst.addPromptResponse("I apologize, but I'm experiencing some difficulty processing your request at this moment, which might be due to the complexity of your query or a technical limitation on my end, so I would greatly appreciate it if you could rephrase your question or provide additional context that might help me better understand what you're looking for.");
                aiAssistViewInst.promptSuggestions = [];
                updateConversationName(prompt);
            }
            grpListObj = getListViewInstance();
            const dataSource = grpListObj.dataSource;
            if (!dataSource || dataSource.length === 0) {
                loadNewAIAssist();
                return;
            }
        }
    </script>
    <script id="bannerContent" type="text/x-jsrender">
        <div class="banner-content e-no-content">
            <div class="e-icons e-assistview-icon"></div>
            <h3>AI Assistance</h3>
            <div class="ai-assist-banner-subtitle">Hello, I'm Your Digital Assistant!</div>
        </div>
    </script>
}

@section Meta{
    <meta name="description" content="This example demonstrates the Default Functionalities in ASP.NET MVC AIAssistView control. Explore here for more details." />
}
@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates a AI chat assistant with conversation management. Users can create new conversations and receive AI-generated responses with relevant suggestions.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>The AI AssistView component in this example showcases integration of an AI usage with conversation history management which include's:</p>
        <ul>
            <li>Sidebar with organized conversation history, categorized by date (Today and Previous days)</li>
            <li>Customizable banner interface using <code>bannerTemplate</code> for guidance messages</li>
            <li>Intelligent follow-up suggestions after each responses via <code>promptSuggestions</code></li>
            <li>Local storage integration for persisting conversation history across sessions</li>
            <li>Toolbar with convenient actions new chat, toggle sidebar, and user profile</li>
        </ul>
        <p>This example demonstrates how to build a AI assistant interface with conversation management, providing users with a seamless and productive AI interaction experience.</p>
    </div>
}
@section Title{
    <title>ASP.NET MVC AIAssistView Default Functionalities Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Default Functionalities in ASP.NET MVC AIAssistView Control</h1>
}